syntax = "proto3";

package epfl.distributed.core;

import "scalapb/scalapb.proto";

option (scalapb.options) = {
  import: "epfl.distributed.math.Vec.numberTypeMapper"
};


service Master {
    rpc RegisterSlave (Node) returns (Ack) {}
    rpc UnregisterSlave (Node) returns (Ack) {}
}

message Node {
    string host = 1;
    int32 port = 2;
}

message Ack {}


service Slave {
    rpc RegisterSlave (Node) returns (Ack) {}
    rpc UnregisterSlave (Node) returns (Ack) {}

    rpc Forward (ForwardRequest) returns (ForwardReply) {}
    rpc Gradient (GradientRequest) returns (GradientReply) {}
}

message Sparse {
    map<int32, double> map = 1 [(scalapb.field).value_type = "spire.math.Number"];
    int32 size = 2;
}

message ForwardRequest {
    repeated int32 samples = 1 [packed=true];
    Sparse weights = 2 [(scalapb.field).type = "epfl.distributed.math.Vec"];
}

message ForwardReply {
    repeated double predictions = 1 [packed=true];
}

message GradientRequest {
    repeated int32 samples = 1 [packed=true];
    double step = 2;
    double lambda = 3;
    Sparse weights = 4 [(scalapb.field).type = "epfl.distributed.math.Vec"];
}

message GradientReply {
    Sparse grad = 1 [(scalapb.field).type = "epfl.distributed.math.Vec"];
    int64 startedAt = 2;
    int64 terminatedAt = 3;
}
